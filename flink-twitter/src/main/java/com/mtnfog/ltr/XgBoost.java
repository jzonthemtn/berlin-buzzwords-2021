package com.mtnfog.ltr;

import com.mtnfog.FlinkTwitter;
import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;
import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.util.HashMap;

public class XgBoost {

    // https://github.com/o19s/elasticsearch-learning-to-rank/tree/master/demo/xgboost-demo

    public static void main(String[] args) throws XGBoostError, IOException {

        final XgBoost xgBoost = new XgBoost();
        final String model = xgBoost.train(FlinkTwitter.DATA_DIR);

        System.out.println(model);

    }

    public String train(String baseModelPath) throws XGBoostError, IOException {

        // https://xgboost.readthedocs.io/en/latest/jvm/java_intro.html

        System.out.println("Starting model training.");

        // load file from text file, also binary buffer generated by xgboost4j
        final DMatrix trainMat = new DMatrix(baseModelPath + "xgboost.txt");

        //specify parameters
        final HashMap<String, Object> params = new HashMap<String, Object>();
        params.put("eta", 1.0);
        params.put("max_depth", 2);
        params.put("silent", 1);
        params.put("objective", "reg:linear");
        //params.put("objective", "rank:pairwise");

        //specify watchList
        final HashMap<String, DMatrix> watches = new HashMap<String, DMatrix>();
        watches.put("train", trainMat);
        //watches.put("test", testMat);

        //train xgboost
        final Booster booster = XGBoost.train(trainMat, params, 2, watches, null, null);

        //dump model with feature map
        final String[] modelInfos = booster.getModelDump(baseModelPath + "featuremap.txt", false, "json");
        //final String[] modelInfos = booster.getModelDump((String) null, false, "json");

        return dumpModel(modelInfos);

    }

    private String dumpModel(String[] modelInfos) throws IOException {

        final StringBuilder sb = new StringBuilder();

        sb.append("[\n");
        sb.append(StringUtils.join(modelInfos, ","));
        sb.append("\n]");

        return sb.toString();

    }

}
